#include <iostream>
#include "stdlib.h"
#include "stdio.h"
#include "math.h"
#include "locale"
#include "fstream"
#include "time.h"
#include "windows.h"
using namespace std;

void input(int* a, int n, int sub, int before);
void output(int* a, int n);
int fact_rec(int n, int &p, int &c);
int fact_norec(int n, int& p, int& c);
int f_task2(int n);
int f_task6(int n);
int g_task6(int n);
int summ_m(int* a, int n);
int num_in_sus(int a, int b);
int pow_2(int n);

int main()
{
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));

	int choosee = -1;
	ifstream f;

	cout << "\tЛабораторная работа по языкам программирования\n\t\t\tВариант 9\n";

	while (choosee != 0)
	{
		cout << "\nВведите номер задания:\n\t1. Задания в классе. Две функции факториала\n\t2. Задания в классе. Функция F(n) = F(n–1) * (n–1)\n\t3. Задания в классе. Проверка числа на точную степень двойки\n\t4. Вариант 9, задача 1 - Сумма элементов массива, стоящих на четных местах\n\t5. Вариант 9, задача 2 - Перевод десятичного числа А в систему с основанием В\n\t6. Вариант 9, задача 3 - Значение функций F(n) и G(n)\n\t0. Выход\n";
		cin >> choosee;
		system("cls");

		if (choosee == 1)
		{
			int n, p = 0, c = 0; //p - количество присвоений, с - количество сравнений

			cout << "Задание 1. Рекурсивная и не рекурсивная функции вычисления факториала\nВведите N: ";
			cin >> n;
			while (n > 12 || n < 0)
			{
				if (n > 12) cout << "Факториал данного значения выйдет за пределы типа int\nВведите заново: ";
				if (n < 0) cout << "Факториал отрицательных чисел не определен\nВведите заново: ";
				cin >> n;
			}
			int g = fact_rec(n, p, c);
			printf("\nМетод\t\tЗначение\tПрисвоений\t Сравнений\n");
			printf("Рекурсия      %10d\t%10d\t%10d\n", g, p, c);
			p = 0;
			c = 0;
			g = fact_norec(n, p, c);
			printf("Без рекурсии  %10d\t%10d\t%10d\n", g, p, c);

			/*
			Ввод: 5
			Вывод: 
					Метод           Значение        Присвоений       Сравнений
					Рекурсия             120                10               6
					Без рекурсии         120                12               5
			Мой ответ: 120

			Ввод: 0
			Вывод:
					Метод           Значение        Присвоений       Сравнений
					Рекурсия               1                 0               1
					Без рекурсии           1                 2               0
			Мой ответ: 1

			Ввод: 1
			Вывод:
					Метод           Значение        Присвоений       Сравнений
					Рекурсия               1                 2               2
					Без рекурсии           1                 4               1
			Мой ответ: 1

			Ввод: 15
			Вывод: Факториал данного значения выйдет за пределы типа int. Введите заново:

			Ввод: -2
			Вывод: Факториал отрицательных чисел не определен
			Мой ответ: не определен


			Как видно из таблиц, метод рекурсии показал себя лучше. Сравнений в данном методе производится на 2 меньше, однако присвоений на 1 больше.
			2 - 1 = 1. В методе рекурсии происводится на одну опирацию меньше, чем в методе цикла.
			*/
		}

		if (choosee == 2)
		{
			int n;

			cout << "Задание 2. Вычислить значение функции F(6), где F(n) = F(n–1) * (n–1), а F(1) = 3\nВведите n: ";
			cin >> n;
			while (n <= 0 || n > 14)
			{
				if (n <= 0) cout << "Отрицательные и нулевое значения недопустимы\nВведите заново: ";
				if (n > 14) cout << "Значение функции от данного числа выйдет за пределы типа int\nВведите заново: ";
				cin >> n;
			}
			cout << "F(" << n << ") = " << f_task2(n) << endl;

			/*
			Данная функция является факториалом числа n - 1, умноженного на 3

			Ввод: 6
			Вывод: F(6) = 360
			Мой ответ: 360

			Ввод: 15
			Вывод: Значение функции от данного числа выйдет за пределы типа int

			Ввод: -3
			Вывод: Отрицательные и нулевое значения недопустимы

			Ввод:3
			Вывод: F(6) = 6
			Мой ответ: 6
			*/
		}

		if (choosee == 3)
		{
			int n;

			cout << "Вывести YES, если число n является точной степенью двойки, или NO в противном случае\nВведите n: ";
			cin >> n;
			while (n <= 0)
			{
				if (n <= 0) cout << "Отрицательные и нулевое значения недопустимы\nВведите заново: ";
				cin >> n;
			}
			if (pow_2(n) == 1) cout << "\nYES\n";
			else cout << "\nNO\n";

			/*
			Ввод: 1024
			Вывод: YES
			Мой ответ: YES

			Ввод: 33
			Вывод: NO
			Мой ответ: NO

			Ввод: 31
			Вывод: NO
			Мой ответ: NO
			
			Ввод: 34
			Вывод: NO
			Мой ответ: NO

			Ввод: 32
			Вывод: YES
			Мой ответ: YES

			Ввод: -3
			Вывод: Отрицательные и нулевое значения недопустимы. Введите заново:

			Ввод: 1
			Вывод: NO
			Мой ответ: NO
			
			Ввод: 2
			Вывод: YES
			Мой ответ: YES
			*/
		}

		if (choosee == 4)
		{
			int n;

			cout << "Задание 4. Найти сумму элементов массива, стоящих на четных местах\nВведите количество элементов массива: ";
			cin >> n;
			while (n <= 0)
			{
				if (n <= 0) cout << "Отрицательные и нулевое значения недопустимы\nВведите заново: ";
				cin >> n;
			}
			int* a = new int[n];
			input(a, n, -10, 10);
			cout << "\nМассив:\n";
			output(a, n);
			cout << "\n\nСумма элементов, стоящих на четных местах: " << summ_m(a, n - 1) << endl;
			delete[] a;

			/*
			Ввод: n = 10
				Массив: -2  -1  -8  -8  -4   6  -8  -8  -3  -3
			Вывод: -25
			Мой ответ: -25

			Ввод: n = 11
				Массив: -4   3  -9  -4  -6   7  -1  -6 -10  -1  -8
			Вывод: -38
			Мой ответ: -38

			Ввод: n = -3
			Вывод: Отрицательные и нулевое значения недопустимы. Введите заново:
			*/
		}

		if (choosee == 5)
		{
			int a, b;

			cout << "Задание 5. Перевести числа А из 10 - ой системы числения в систему с основанием В\nВведите число А: ";
			cin >> a;
			while (a < 1)
			{
				if (a <= 0) cout << "Отрицательные и нулевое значения недопустимы\nВведите заново: ";
				cin >> a;
			}
			cout << "Введите число В: ";
			cin >> b;
			while (b <= 1 || b > 10)
			{
				if (b <= 1) cout << "Значения меньше двух недопустимы\nВведите заново: ";
				if (b > 10) cout << "Данная программа не предназначина для перевода числа в число с основанием больше 10\nВведите заново: ";
				cin >> b;
			}
			cout << "\nДесятичное число " << a << " в " << b << " - ичной системе счисления: " << num_in_sus(a, b) << endl;

			/*
			Ввод: А = 23	В = 4
			Вывод: 113
			Мой ответ: 113

			Ввод: А = 3		В = 2
			Вывод: 11
			Мой ответ: 11

			Ввод: А = 65	В = 7
			Вывод: 122
			Мой ответ: 122

			Ввод: А = -3
			Вывод: Отрицательные и нулевое значения недопустимы. Введите заново:

			Ввод: А = 65	В = -5
			Вывод: Значения меньше двух недопустимы

			Ввод: А = 65	В = 16
			Вывод: Данная программа не предназначина для перевода числа в число с основанием больше 10. Введите заново:
			*/
		}

		if (choosee == 6)
		{
			int n;

			cout << "Задание 6. Значение функций F(n) и G(n)\nF(n) = 10*F(n – 1) - G(n – 1), где F(1) = -1\nG(n) = 5*F(n–1) - G(n – 1), где G(1) = 1\nВведите число, до которого будут вестись расчеты: ";
			cin >> n;
			while (n < 1 || n > 10)
			{
				if (n < 1) cout << "Отрицательные и нулевое значения недопустимы\nВведите заново: ";
				if (n > 10) cout << "Значение функции от данного числа выйдет за пределы типа int\nВведите заново: ";
				cin >> n;
			}
			printf("\nn\t      F(n)\t      G(n)\n");
			for (int i = 1; i <= n; i++)
			{
				printf("%d\t%10d\t%10d\n", i, f_task6(i), g_task6(i));
			}

			/*
			Ввод: 10
			Вывод:
							n             F(n)            G(n)
							1               -1               1
							2              -11              -6
							3             -104             -49
							4             -991            -471
							5            -9439           -4484
							6           -89906          -42711
							7          -856349         -406819
							8         -8156671        -3874926
							9        -77691784       -36908429
							10      -740009411      -351550491
			Мой ответ: Программа вывела верный результат

			Ввод: -6
			Вывод: Отрицательные и нулевое значения недопустимыю. Введите заново:

			Ввод: 11
			Вывод: Значение функции от данного числа выйдет за пределы типа int. Введите заново: 
			*/
		}
	}

	return 0;
}

int fact_rec(int n, int& p, int& c)		//Возращает факториал числа n. Считает количество сранений p и количество сравнений c. Использует местод рекурсии
{
	c++;
	if (n == 0)
	{
		return 1;
	}
	else
	{
		p += 2;
		return fact_rec(n - 1, p, c) * n;
	}
}

int fact_norec(int n, int& p, int& c)	//Возращает факториал числа n. Считает количество сранений p и количество сравнений c. Использует местод циклов
{
	int s = 1;
	p += 2;
	for (int i = 1; i <= n; i++)
	{
		c++;
		p += 2;
		s *= i;
	}
	return s;
}

int f_task2(int n)	//Возращает значение функции F(n) = F(n–1) * (n–1), где F(1) = 3. Данная функция исполльзуется в задании 2
{
	if (n == 1) return 3;
	else return f_task2(n - 1) * (n - 1);
}

int f_task6(int n)	//Возращает значение функции F(n) = 10*F(n – 1) - G(n – 1), где F(1) = -1. Данная функция исполльзуется в задании 6
{
	if (n == 1) return -1;
	else return 10 * f_task6(n - 1) - g_task6(n - 1);
}

int g_task6(int n)	//Возращает значение функции G(n) = 5*F(n–1) - G(n – 1), где G(1) = 1. Данная функция исполльзуется в задании 6
{
	if (n == 1) return 1;
	else return 5 * f_task6(n - 1) - g_task6(n - 1);
}

void input(int* a, int n, int sub, int before)	//Заполняет целочисленный массив массив случайными элементами. На вход подаются: массив, колво элементов, нижняя граница, верхняя граница
{
	for (int i = 0; i < n; i++) a[i] = rand() % (before - sub + 1) + sub;
}

void output(int* a, int n)	//Выводит целочисленный массив на экран. На вход подаются: массив, количество элементов
{
	for (int i = 0; i < n; i++) printf("%4d", a[i]);
}

int summ_m(int* a, int n)	//Возращает сумму элементов массива a, стоящих на четных местах (считае места с 0, а не с 1). n - количество элементов массива
{
	if (n % 2 == 0)
	{
		if (n == 0) return a[n];
		else return a[n] + summ_m(a, n - 2);
	}
	else
	{
		return summ_m(a, n - 1);
	}
}

int num_in_sus(int a, int b)	//Переводит число a в систему счисления с основанием b. 2 <= b <= 10, иначе выдает неверный результат. Возращает число a в системе счисления b
{
	if (a < b) return a;
	else return 10 * num_in_sus(a / b, b) + (a - a / b * b);
}

int pow_2(int n)	//Возращает 1, если n - степень двойки, иначе возращает 0
{
	if (n % 2 == 1) return 0;
	else
	{
		if (n == 2) return 1;
		else return pow_2(n / 2);
	}
}
#include <iostream>
#include "stdlib.h"
#include "stdio.h"
#include "math.h"
#include "locale"
#include "fstream"
#include "time.h"
using namespace std;

void input(float *a, int n);
void input2(int **a, int n, int m);
void output(float* a, int n);
void output2(int** a, int n, int m);
int maximum(float *a, int n);
int minimum(float* a, int n);
float mean(float* a, int n);
int charct(int** a, int n, int i);

int main()
{
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));

	int choose = -1;
	while (choose != 0)
	{
		cout << endl <<  "\nВведите номер задания. Чтобы выйти из программы, введите 0: ";
		cin >> choose;

		/*Задание 1.	а: Найти номер элемента, значение которого наиболее близко среднему значению элементов
						b: найти минимальный эдемент среди положительных 
						с: вычислить сумму элементов, расположенных до первого отрицательного
		*/

		if (choose == 1)
		{
			float* a, mea, def;
			int m, n;

			cout << "\n\tЗадание 1\nВведите количество элементов массива: ";
			cin >> n;
			a = new float[n];
			input(a, n);
			cout << "Первоначальный массив: ";
			output(a, n);
			cout << "\n\nЗадание a: Найти номер элемента, значение которого наиболее близко среднему значению элементов:";
			mea = mean(a, n);
			def = fabs(a[0] - mea);
			m = 0;
			for (int i = 1; i < n; i++)
			{
				if (fabs(a[i] - mea) <= def)
				{
					def = fabs(a[i] - mea);
					m = i;
				}
			}
			cout << "\nЗначение " << m << " элемента, равного " << a[m] <<" наиболее близко к среднему значению, равному " << mea;
			cout << "\n\nЗадание b: найти минимальный эдемент среди положительных:\nМинимальный элемент среди положительных: " << a[minimum(a, n)] <<". Стоит на " << minimum(a, n) << " месте";
			cout << "\n\nЗадание c: вычислить сумму элементов, расположенных до первого отрицательного:";
			m = 0;
			for(int i = 0; i < n; i++)
			{
				if (a[i] >= 0) m += a[i];
				else break;
			}
			cout << "\nСумаа элементов, расположенных до первого отрицательного: " << m << endl;

			/*
			Ввод:		n = 5. Массив: 17  -19  9  40  -11  36  38  -38  36  37

			Вывод:		Задание a: Найти номер элемента, значение которого наиболее близко среднему значению элементов:
						Значение 0 элемента, равного 17 наиболее близко к среднему значению, равному 14.5

						Задание b: найти минимальный эдемент среди положительных:
						Минимальный элемент среди положительных: 9. Стоит на 2 месте

						Задание c: вычислить сумму элементов, расположенных до первого отрицательного:
						Сумаа элементов, расположенных до первого отрицательного: 17

			Мой ответ:	Задание a: Значение 0 элемента, равного 17 наиболее близко к среднему значению, равному 14.5
						
						Задание b: Минимальный элемент среди положительных: 9. Стоит на 2 месте

						Задание c: Сумаа элементов, расположенных до первого отрицательного: 17
			*/
		}

		//Задание 2. Характеристика столбца -  сумма модулей его отрицательных нечетных элементов. Найти номер стобца матрицы с минимальной характеристикой

		if (choose == 2)
		{
			int** a, n, m, har, st;
			cout << "\n\tЗадание 2\nНайти номер столбца матрицы с минимальной характеристикой\nХарактеристика столбца -  сумма модулей его отрицательных нечетных элементов.\nВведите количество строк матрицы: ";
			cin >> n;
			cout << "Введите количество столбцов матрицы: ";
			cin >> m;
			a = new int* [n];
			for (int i = 0; i < n; i++) a[i] = new int[m];
			input2(a, n, m);
			output2(a, n, m);
			har = charct(a, n, 0);
			for (int j = 1; j < m; j++)
			{
				if (charct(a, n, j) >= har)
				{
					har = charct(a, n, j);
					st = j + 1;
				}
			}
			cout << endl << st << " столбец имеет максимальную характеристику, равную " << har << endl;

			/*
			Ввод:		Строк: 5    Столбцов: 7
						Матрица:
						   -6  -23   32  -67   35   50  -77
						  -43  -15   26   15  -27  -49   29
						  -11   56   -8  -82  -81  -42   22
						  -80  -45  -65   32  -19  -87   14
						  -53  -96  -49  -32  -35  -29  -61

			Вывод:		6 столбец имеет максимальную характеристику, равную 165

			Мой ответ:	6 столбец имеет максимальную характеристику, равную 165
			*/
		}
	}
	return 0;
}

void input(float *a, int n)		//Заполняет одномерный вещественный массив случайными элементами. На вход подаются: массив, количество элементов
{
	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 100 - 50;
	}
}

void output(float* a, int n)	//Выводит на экран одномерный вещественный массив. На вход подаются: массив, количество элементов
{
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << "  ";
	}
}

int maximum(float* a, int n)	//Ищет номер макимального элемента в вещественном массиве. На вход подаются: массив, количество элементов
{
	int m = 0;
	for (int i = 0; i < n; i++)
	{
		if (a[i] >= a[m]) m = i;
	}
	return m;
}

int minimum(float* a, int n)	//Ищет номер минимального элемента среди положительных в вещественном массиве. На вход подаются: массив, количество элементов
{
	int m;
	for (int i = 1; i < n; i++)
	{
		if (a[i] > 0)
		{
			m = i;
			break;
		}
	}
	for (int i = 0; i < n; i++)
	{
		if ((a[i] <= a[m]) && (a[i] > 0)) m = i;
	}
	return m;
}

float mean(float* a, int n)		//Ищет среднее значение элементов вещественного массива. На вход подаются: массив, количество элементов
{
	float s = 0;
	for (int i = 0; i < n; i++) s = s + a[i];
	s = s / n;
	return s;
}

int charct(int** a, int n, int j)	//Ищет характеристику столбца матрицы. Характеристика столбца - сумма модулей его отрицательных нечетных элементов
{									//На вход подаются: матрица, количество строк, номер столбца, в котром необходимо найти характеристику
	int s = 0;
	for (int i = 0; i < n; i++)
	{
		if ((a[i][j] < 0) && (a[i][j] % 2 != 0))
		{
			s += fabs(a[i][j]);
		}
	}
	return s;
}

void input2(int** a, int n, int m)	//Заполняет матрицу случайными элементами. На вход подаются: матрица, количество строк, количество столбцов
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			a[i][j] = rand() / 200 - 100;
		}
	}
}

void output2(int** a, int n, int m)	//Выводит матрицу на экран. На вход подаются: матрица, количество строк, количество столбцов
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			printf("%5d",a[i][j]);
		}
		cout << endl;
	}
}